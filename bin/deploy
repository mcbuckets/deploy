#!/usr/bin/env bash

#
# Minimalistic shell script to deploy Git repositories.
# Released under the MIT License.
#
# https://github.com/visionmedia/deploy
#

NOW=$(date +"%d-%m-%Y-%H-%M-%S")
NUMBER=$(ls -l | grep ^d | wc -l)
VERSION="1.0.14"
HOME="$HOME/"
CONFIG=./deploy.conf
LOG=/tmp/deploy.log
TEST=1
REF=
ENV=

#
# Output usage information.
#

usage() {
  cat <<-EOF

  Usage: deploy [options] <env> [command]

  Options:

    -C, --chdir <path>   change the working directory to <path>
    -c, --config <path>  set config path. defaults to ./deploy.conf
    -T, --no-tests       ignore test hook
    -V, --version        output program version
    -h, --help           output help information

  Commands:

    setup                run remote setup commands
    symfony              run remote symfony setup commands
    wordpress            run remote wordpress setup commands
    restore              run remote server account restore
    update               update deploy to the latest release
    revert [n]           revert to [n]th last deployment or 1
    config [key]         output config file or [key]
    curr[ent]            output current release commit
    prev[ious]           output previous release commit
    exec|run <cmd>       execute the given <cmd>
    console              open an ssh session to the host
    list                 list previous deploy commits
    [ref]                deploy to [ref], the 'ref' setting, or latest tag

EOF
}

#
# Abort with <msg>
#

abort() {
  echo
  echo "  $@" 1>&2
  echo
  exit 1
}

#
# Log <msg>.
#

log() {
  echo "  ○○○ $@"
}

#
# Set configuration file <path>.
#

set_config_path() {
  test -f $1 || abort invalid --config path
  CONFIG=$1
}

#
# Check if config <section> exists.
#

config_section() {
  grep "^\[$1" $CONFIG &> /dev/null
}

#
# Get config value by <key>.
#

config_get() {
  local key=$1
  test -n "$key" \
    && grep "^\[$ENV" -A 20 $CONFIG \
    | grep "^$key" \
    | head -n 1 \
    | cut -d ' ' -f 2-999
}

#
# Output version.
#

version() {
  echo $VERSION
}

#
# Return the ssh command to run.
#

ssh_command() {
  local url="`config_get user`@`config_get host`"
  local key=$HOME"`config_get key`"
  local forward_agent="`config_get forward-agent`"
  local port="`config_get port`"
  local needs_tty="`config_get needs_tty`"

  test -n "$forward_agent" && local agent="-A"
  test -n "$key" && local identity="-i $key"
  test -n "$port" && local port="-p $port"
  test -n "$needs_tty" && local tty="-t"
  echo "ssh $tty $agent $port $identity $url"
}

#
# Run the given remote <cmd>.
#

run() {
  local shell="`ssh_command`"
  echo $shell "\"$@\"" >> $LOG
  $shell $@
}

#
# Launch an interactive ssh console session.
#

console() {
  local path="`config_get path`"
  local shell="`ssh_command`"
  echo $shell
  exec $shell -t "cd $path; \$SHELL --login"
}

#
# Output config or [key].
#

config() {
  if test $# -eq 0; then
    cat $CONFIG
  else
    config_get $1
  fi
}

#
# Execute hook <name> relative to the path configured.
#

hook() {
  test -n "$1" || abort hook name required
  local hook=$1
  local path=`config_get path`
  local cmd=`config_get $hook`
  local unique=$NOW
  if test -n "$cmd"; then
    log "executing $hook \`$cmd\`"
    run "cd $path/source/$unique; \
      SHARED=\"$path/shared\" \
      $cmd 2>&1 | tee -a $LOG; \
      exit \${PIPESTATUS[0]}"
    test $? -eq 0
  else
    log hook $hook
  fi
}

#
# Run web folders setup.
#

setup() {
  local path=`config_get path`
  log running setup - creating shared/source directories
  run "mkdir -p $path/{shared/{app,web},source}"
  test $? -eq 0 || abort setup paths failed
  log done creating shared/source directories
  log symlinking source to current folder
  run "ln -sfn $path/source $path/current"
  log done
  log making shared web/media folder in $path
  run "mkdir $path/shared/web/media"
  test $? -eq 0 || web/media symlink not created
  log done
  log making shared .htaccess file in $path
  run "touch $path/shared/web/.htaccess"
  test $? -eq 0 || .htaccess symlink not created
  log done
  #log making shared parameters.yml file in $path
  #run "touch $path/shared/app/config/parameters.yml"
  #test $? -eq 0 || parameters.yml symlink not created
  #log done
  log making shared app/logs folder in $path
  run "mkdir $path/shared/app/logs"
  test $? -eq 0 || logs symlink not created
  log done
  log making shared app/config folder in $path
  run "mkdir $path/shared/app/config"
  test $? -eq 0 || config symlink not created
  log done
  log deleting public_html folder
  run "rm -rf $path/public_html"
  test $? -eq 0 || public_html not deleted
  log done
  log setup complete
}

#
# Run wordpress template folders setup.
#

#themesetup() {
#  local path=`config_get path`
#  local template=`config_get template`
#  log running setup - creating template directories
#  run "mkdir -p $path/$template"
#  test $? -eq 0 || abort setup template dirs failed
#  log done creating template directories
#  log setup complete
#}

#
# Deploy Symfony.
#
symfony() {
  local path=`config_get path` #get deploy path
  local repo=`config_get repo` #get repository
  local branch=`config_get ref` #get branch name
  local action=`config_get comp` #get composer action (install or update)
  local broj=`config_get broj` #get number of releases we want to save in source folder
  local unique=$NOW #get unique name for release folder
  log cloning $repo
  run "git clone $repo -b $branch $path/source/$unique" #cloning repo to unique release folder
  test $? -eq 0 || abort failed to clone - run deploy prod restore
  #log removing parameters.yml symlink
  #run "rm -f $path/shared/app/config/parameters.yml"
  #test $? -eq 0 || parameters.yml symlink not removed
  log symlinking parameters.yml file to shared
  run "ln -sfn $path/shared/app/config/parameters.yml $path/source/$unique/app/config/parameters.yml" #make symlink to shared folder
  test $? -eq 0 || .htaccess symlink not created
  log done
  log downloading composer.phar
  run "cd $path/source/$unique && curl -sS https://getcomposer.org/installer | php && php composer.phar $action" #download composer.phar to unique release folder
  test $? -eq 0 || abort composer not downloaded or composer $action not executed
  log done
  log symlinking web/media folder to shared
  run "rm -rf $path/source/$unique/web/media" #remove symlink if exists, which it shouldnt
  run "ln -sfn $path/shared/web/media $path/source/$unique/web/media" #make symlink to shared folder
  test $? -eq 0 || web/media symlink not created
  log done
  log symlinking .htaccess folder to shared
  run "ln -sfn $path/shared/web/.htaccess $path/source/$unique/web/.htaccess" #make symlink to shared folder
  test $? -eq 0 || .htaccess symlink not created
  log done  
  log symlinking logs folder to shared
  run "rm -rf $path/source/$unique/app/logs" #remove symlink if exists, which it shouldnt
  run "ln -sfn $path/shared/app/logs $path/source/$unique/app/logs" #make symlink to shared folder
  test $? -eq 0 || logs symlink not created
  log done
  log change hook permissions
  run "chmod -R 755 $path/source/$unique" #changing permissions so that hook scripts can run
  test $? -eq 0 || abort failed to change permissions
  log done
  log deploying
  hook pre-deploy || abort pre-deploy hook failed
  log done running pre-deploy scripts
  log fetching updates
  run "cd $path/source/$unique && git fetch --all" #fetch repo into unique release folder
  test $? -eq 0 || abort fetch failed
  log done fetching updates
  # fetch latest tag
  if test -z "$ref"; then
    log fetching latest tag
    ref=`run "cd $path/source/$unique && git for-each-ref refs/tags \
      --sort=-*authordate \
      --format='%(refname)' \
      --count=1 | cut -d '/' -f 3"`
    test $? -eq 0 || abort failed to determine latest tag
  fi
  log done fetching latest tag
  local ref=$(git rev-parse --short HEAD) #get latest commit HEAD  
  # reset HEAD /mislim da ovo ne treba, da sacuva shared symlinkove
  #log resetting HEAD to $ref
  #run "cd $path/source && git reset --hard $ref"
  #test $? -eq 0 || abort git reset failed

  #log deploys to .deploys file so we can now what has been deployed
  run "cd $path/source/$unique && \
      echo \`git rev-parse --short HEAD\` \
      >> $path/.deploys"
  test $? -eq 0 || abort deploy log append failed
  log done logging deploy
  
  hook mid-deploy || abort mid-deploy hook failed

  if test $TEST -eq 1; then
    hook test
    if test $? -ne 0; then
      log tests failed, reverting deploy
      quickly_revert_to 1 && log "revert complete" && exit
    fi
  else
    log ignoring tests
  fi
  log done running mid-deploy scripts
  log removing app_*.php files
  run "rm -rf $path/source/$unique/web/app_*.php" #remove app_dev.php file on deploy
  test $? -eq 0 || abort app_*.php removal failed
  log done removing app_*.php files
  log creating deploy symlinks
  run "ln -sfn $path/source/$unique $path/current" #symlink unique release folder name to current
  test $? -eq 0 || abort symlink failed
  log done creating current symlink #nakon ovoga ide rm -rf public_html i symlink
  log deleting public_html folder
  run "rm -rf $path/public_html"
  test $? -eq 0 || public_html not deleted
  log done
  log creating public_html symlink
  run "rm -rf $path/public_html && ln -sfn $path/current/web $path/public_html" #symlink current/web folder to public_html
  test $? -eq 0 || abort public_html symlink failed
  log done symlinking current/web to public_html
  log removing all but latest $broj deploys
  run "ls -d -1tr $path/source/* | head -n -$broj | xargs -d '\n' rm -rf" #remove all but $broj number of deploys
  log done removing all but latest $broj deploys
  hook post-deploy || abort post-deploy hook failed
  log done running post-deploy scripts
  log successfully deployed $ref
}

#
# Deploy Wordpress.
#

wordpress() {
  local path=`config_get path` #get deploy path
  local repo=`config_get repo` #get repository
  local branch=`config_get ref` #get branch name
  local broj=`config_get broj` #get number of releases we want to save in source folder
  local unique=$NOW #get unique name for release folder
  local ref=$1 #get 
  log cloning $repo
  run "git clone $repo -b $branch $path/source/$unique" #cloning repo to unique release folder
  test $? -eq 0 || abort failed to clone - run deploy prod restore
  log done
  log change hook permissions
  run "chmod -R 755 $path/source/$unique" #changing permissions so that hook scripts can run
  test $? -eq 0 || abort failed to change permissions
  log done
  log deploying
  hook pre-deploy || abort pre-deploy hook failed
  log done running pre-deploy scripts
  log fetching updates
  run "cd $path/source/$unique && git fetch --all" #fetch repo into unique release folder
  test $? -eq 0 || abort fetch failed
  log done fetching updates
  # fetch latest tag
  if test -z "$ref"; then
    log fetching latest tag
    ref=`run "cd $path/source/$unique && git for-each-ref refs/tags \
      --sort=-*authordate \
      --format='%(refname)' \
      --count=1 | cut -d '/' -f 3"`
    test $? -eq 0 || abort failed to determine latest tag
  fi
  log done fetching latest tag
  local ref=$(git rev-parse --short HEAD) #get latest commit HEAD 
  # reset HEAD /mislim da ovo ne treba, da sacuva shared symlinkove
  #log resetting HEAD to $ref
  #run "cd $path/source && git reset --hard $ref"
  #test $? -eq 0 || abort git reset failed

  #log deploys to .deploys file so we can now what has been deployed
  run "cd $path/source/$unique && \
      echo \`git rev-parse --short HEAD\` \
      >> $path/.deploys"
  test $? -eq 0 || abort deploy log append failed
  log done logging deploy
  
  hook mid-deploy || abort mid-deploy hook failed

  if test $TEST -eq 1; then
    hook test
    if test $? -ne 0; then
      log tests failed, reverting deploy
      quickly_revert_to 1 && log "revert complete" && exit
    fi
  else
    log ignoring tests
  fi
  log done running mid-deploy scripts
  log creating deploy unique folder symlink to current
  run "ln -sfn $path/source/$unique $path/current" #symlink unique release folder name to current
  test $? -eq 0 || abort symlink failed
  
  #log creating symlink to shared uploads and plugin folders
  #run "ln -sfn $path/shared/web/wp-content/uploads $path/source/$unique/wp-content" #symlink unique release folder to shared uploads
  #run "ln -sfn $path/shared/web/wp-content/plugins $path/source/$unique/wp-content" #symlink unique release folder to shared uploads
  #test $? -eq 0 || abort symlink failed

  log done creating current symlink
  log creating public_html symlink
  run "ln -sfn $path/current $path/public_html" #symlink current/web folder to public_html
  test $? -eq 0 || abort public_html symlink failed
  log done symlinking current/web to public_html
  log removing all but latest $broj deploys
  run "ls -d -1tr $path/source/* | head -n -$broj | xargs -d '\n' rm -rf" #remove all but $broj number of deploys
  log done removing all but latest $broj deploys
  hook post-deploy || abort post-deploy hook failed
  log done running post-deploy scripts
  log successfully deployed $ref
}

#
# Deploy Wordpress Template
#

themewordpress() {
  local path=`config_get path` #get deploy path
  local repo=`config_get repo` #get repository
  local branch=`config_get ref` #get branch name
  local template=`config_get template` #get branch name
  local broj=`config_get broj` #get number of releases we want to save in source folder
  local unique=$NOW #get unique name for release folder
  local ref=$1 #get 
  log cloning $repo
  run "git clone $repo -b $branch $path/$template-$unique-source" #cloning repo to unique release folder
  test $? -eq 0 || abort failed to clone - run deploy prod restore
  log done
  log change hook permissions
  run "chmod -R 755 $path/$template-$unique-source" #changing permissions so that hook scripts can run
  test $? -eq 0 || abort failed to change permissions
  log done
  log deploying
  hook pre-deploy || abort pre-deploy hook failed
  log done running pre-deploy scripts
  log fetching updates
  run "cd $path/$template-$unique-source && git fetch --all" #fetch repo into unique release folder
  test $? -eq 0 || abort fetch failed
  log done fetching updates
   #fetch latest tag
  if test -z "$ref"; then
    log fetching latest tag
    ref=`run "cd $path/$template-$unique-source && git for-each-ref refs/tags \
      --sort=-*authordate \
      --format='%(refname)' \
      --count=1 | cut -d '/' -f 3"`
    test $? -eq 0 || abort failed to determine latest tag
  fi
  log done fetching latest tag
  local ref=$(git rev-parse --short HEAD) #get latest commit HEAD 
  # reset HEAD /mislim da ovo ne treba, da sacuva shared symlinkove
  #log resetting HEAD to $ref
  #run "cd $path/source && git reset --hard $ref"
  #test $? -eq 0 || abort git reset failed

  #log deploys to .deploys file so we can now what has been deployed
  run "cd $path/$template-$unique-source && \
      echo \`git rev-parse --short HEAD\` \
      >> $path/.deploys"
  test $? -eq 0 || abort deploy log append failed
  log done logging deploy
  
  hook mid-deploy || abort mid-deploy hook failed

  if test $TEST -eq 1; then
    hook test
    if test $? -ne 0; then
      log tests failed, reverting deploy
      quickly_revert_to 1 && log "revert complete" && exit
    fi
  else
    log ignoring tests
  fi
  log done running mid-deploy scripts
  log creating deploy unique folder symlink to current
  run "ln -sfn $path/$template-$unique-source $path/$template" #symlink unique release folder name to current
  test $? -eq 0 || abort symlink failed
  
  #log creating symlink to shared uploads and plugin folders
  #run "ln -sfn $path/shared/web/wp-content/uploads $path/source/$unique/wp-content" #symlink unique release folder to shared uploads
  #run "ln -sfn $path/shared/web/wp-content/plugins $path/source/$unique/wp-content" #symlink unique release folder to shared uploads
  #test $? -eq 0 || abort symlink failed

  #log done creating current symlink
  #log creating public_html symlink
  #run "ln -sfn $path/current $path/public_html" #symlink current/web folder to public_html
  #test $? -eq 0 || abort public_html symlink failed
  #log done symlinking current/web to public_html
  log removing all but latest $broj deploys
  run "ls -d -1tr $path/$template-* | head -n -$broj | xargs -d '\n' rm -rf" #remove all but $broj number of deploys
  log done removing all but latest $broj deploys
  hook post-deploy || abort post-deploy hook failed
  log done running post-deploy scripts
  log successfully deployed $ref
}

#
# Reset user account to defaults.
#
restore() {
  local path=`config_get path`
  log removing public_html
  run "rm -f $path/public_html"
  log done
  log removing current
  run "rm -f $path/current"
  log done
  log removing source
  run "rm -rf $path/source"
  log done
  log removing shared
  run "rm -rf $path/shared"
  log done
  log removing .deploys file
  run "rm -f $path/.deploys"
  log done
  log restore complete
}

#
# Reset user account to defaults.
#
themerestore() {
  local path=`config_get path`
  local template=`config_get template`
  log removing template folders
  run "rm -rf $path/$template*"
  log done
  log removing .deploys file
  run "rm -rf $path/.deploys"
  log done
  log restore complete
}

#
# Deploy [ref].
#

deploy() {
  local ref=$1
  local path=`config_get path`
  log deploying

  hook pre-deploy || abort pre-deploy hook failed

  # fetch source
  log fetching updates
  run "cd $path/source && git fetch --all"
  test $? -eq 0 || abort fetch failed

  # latest tag
  if test -z "$ref"; then
    log fetching latest tag
    ref=`run "cd $path/source && git for-each-ref refs/tags \
      --sort=-*authordate \
      --format='%(refname)' \
      --count=1 | cut -d '/' -f 3"`
    test $? -eq 0 || abort failed to determine latest tag
  fi

  # reset HEAD /mislim da ovo ne treba, da sacuva shared symlinkove
  #log resetting HEAD to $ref
  #run "cd $path/source && git reset --hard $ref"
  #test $? -eq 0 || abort git reset failed

  # link current
  run "ln -sfn $path/source $path/current"
  test $? -eq 0 || abort symlink failed

  # deploy log
  run "cd $path/source && \
      echo \`git rev-parse --short HEAD\` \
      >> $path/.deploys"
  test $? -eq 0 || abort deploy log append failed

  hook post-deploy || abort post-deploy hook failed

  if test $TEST -eq 1; then
    hook test
    if test $? -ne 0; then
      log tests failed, reverting deploy
      quickly_revert_to 1 && log "revert complete" && exit
    fi
  else
    log ignoring tests
  fi

  # done
  log successfully deployed $ref
}

#
# Get current commit.
#

current_commit() {
  local path=`config_get path`
  run "cd $path/current && \
      git rev-parse --short HEAD"
}

#
# Get <n>th deploy commit.
#

nth_deploy_commit() {
  local n=$1
  local path=`config_get path`
  run "cat $path/.deploys | tail -n $n | head -n 1 | cut -d ' ' -f 1"
}

#
# List deploys.
#

list_deploys() {
  local path=`config_get path`
  run "cat $path/.deploys"
}

#
# Revert to the <n>th last deployment, ignoring tests.
#

quickly_revert_to() {
  local n=$1
  log "quickly reverting $n deploy(s)"
  local commit=`nth_deploy_commit $((n + 1))`
  TEST=0 deploy "$commit"
}

#
# Revert to the <n>th last deployment.
#

revert_to() {
  local n=$1
  log "reverting $n deploy(s)"
  local commit=`nth_deploy_commit $((n + 1))`
  deploy "$commit"
}

#
# Require environment arg.
#

require_env() {
  config_section $ENV || abort "[$ENV] config section not defined"
  test -z "$ENV" && abort "<env> required"
}

#
# Ensure all changes are committed and pushed before deploying.
#

check_for_local_changes() {
  git --no-pager diff --exit-code --quiet          || abort "commit or stash your changes before deploying"
  git --no-pager diff --exit-code --quiet --cached || abort "commit your staged changes before deploying"
  [ -z "`git rev-list @{upstream}.. -n 1`" ]       || abort "push your changes before deploying"
}

#
# Update deploy.
#

update() {
  log updating deploy script
  rm -fr /tmp/deploy && git clone https://github.com/Flegma/deploy.git /tmp/deploy && cd /tmp/deploy && make install
  log "updated $VERSION -> `./bin/deploy --version`"
  #log "updating deploy script"
  #rm -fr /tmp/deploy
  #git clone git:github.com:Flegma/deploy.git \
  #  --depth 0 \
  #  /tmp/deploy \
  #  &> /tmp/deploy.log \
  #&& cd /tmp/deploy \
  #&& make install \
  #&& log "updated $VERSION -> `./bin/deploy --version`"
}

# parse argv

while test $# -ne 0; do
  arg=$1; shift
  case $arg in
    -h|--help) usage; exit ;;
    -V|--version) version; exit ;;
    -c|--config) set_config_path $1; shift ;;
    -C|--chdir) log cd $1; cd $1; shift ;;
    -T|--no-tests) TEST=0 ;;
    run|exec) require_env; run "cd `config_get path`/current && $@"; exit ;;
    console) require_env; console; exit ;;
    curr|current) require_env; current_commit; exit ;;
    prev|previous) require_env; nth_deploy_commit 2; exit ;;
    revert) require_env; revert_to ${1-1}; exit ;;
    setup) require_env; setup $@; exit ;;
    #themesetup) require_env; themesetup $@; exit ;;
    symfony) require_env; symfony $@; exit ;;
    wordpress) require_env; wordpress $@; exit ;;
    themewordpress) require_env; themewordpress $@; exit ;;
    restore) require_env; restore $@; exit ;;
    themerestore) require_env; themerestore $@; exit ;;
    list) require_env; list_deploys; exit ;;
    update) update; exit ;;
    config) config $@; exit ;;
    *)
      if test -z "$ENV"; then
        ENV=$arg;
      else
        REF="$REF $arg";
      fi
      ;;
  esac
done

require_env
check_for_local_changes

# deploy
deploy "${REF:-`config_get ref`}"
